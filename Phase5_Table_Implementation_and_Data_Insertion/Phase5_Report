**📘 Phase V: Table Implementation and Data Insertion Report**

### 🔍 **Objective**

To implement the physical structure of the helpdesk tracking system by creating relational tables, defining constraints, and inserting representative test data that aligns with the logical design.


### 🛠️ **Tasks and Deliverables**

#### 🗂️ 1. Schema Creation

A dedicated user schema `helpdesk_user` was created for encapsulating all the database objects:
sql
CREATE USER helpdesk_user IDENTIFIED BY helpdesk123;
GRANT CONNECT, RESOURCE, UNLIMITED TABLESPACE TO helpdesk_user;

#### 📋 2. Table Definitions

Tables were created based on the ERD to reflect system entities:

* **users**: Stores system user data.
* **tickets**: Tracks support tickets.
* **escalations**: Logs ticket escalation data.
* **audit_log**: Records audit trails of DML operations.
* **holidays**: Contains restricted calendar dates.

**Key Design Elements:**

* `PRIMARY KEY` and `FOREIGN KEY` constraints enforce entity relationships.
* `NOT NULL`, `CHECK`, and `UNIQUE` constraints validate data.
* `GENERATED BY DEFAULT AS IDENTITY` automates primary key values.

**🧾 Example: `users` Table**

sql
CREATE TABLE helpdesk_user.users (
  user_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR2(50) UNIQUE NOT NULL,
  full_name VARCHAR2(100) NOT NULL,
  email VARCHAR2(100) NOT NULL,
  role VARCHAR2(30) CHECK (role IN ('Technician', 'Manager', 'Admin'))
);

**🧾 Example: `tickets` Table**

```sql
CREATE TABLE helpdesk_user.tickets (
  ticket_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title VARCHAR2(150) NOT NULL,
  description VARCHAR2(500),
  priority VARCHAR2(20) CHECK (priority IN ('Low', 'Medium', 'High')),
  assigned_to NUMBER,
  status VARCHAR2(20) DEFAULT 'Open',
  created_at DATE DEFAULT SYSDATE,
  FOREIGN KEY (assigned_to) REFERENCES helpdesk_user.users(user_id)
);

#### 📥 3. Sample Data Insertion

To simulate real-world usage, sample records were added:

-- Insert sample user
INSERT INTO helpdesk_user.users (username, full_name, email, role)
VALUES ('jane.smith', 'Jane Smith', 'jane.smith@example.com', 'Manager');

-- Insert ticket linked to user
INSERT INTO helpdesk_user.tickets (title, description, priority, assigned_to)
VALUES ('Cannot access VPN', 'User unable to connect to company VPN', 'High', 1);

-- Insert holiday
INSERT INTO helpdesk_user.holidays (holiday_date, name)
VALUES (TO_DATE('2025-06-15', 'YYYY-MM-DD'), 'Independence Day');

#### 🔎 4. Data Integrity Checks

Post-insertion `SELECT` statements verified:

* Referential integrity across tables
* Constraint enforcement
* Identity-based auto-increment key generation

#### 🔄 5. Auto-generation with Identity Columns

Oracle’s identity feature simplifies surrogate key management, removing the need for manual sequences.

### ⚠️ Challenges Faced

* **Privileges Issue**: Initial lack of access to USERS tablespace resolved by adjusting grants.
* **Foreign Key Dependency**: Required user record pre-insertion to satisfy `tickets.assigned_to` constraint.
* **Date Handling**: Used `TO_DATE()` for consistent date formatting.

### ✅ Conclusion

Phase V successfully established the foundational data structures for the Helpdesk Tracker. Constraints ensure consistency, while initial data allows for realistic development and testing in subsequent phases. The physical implementation aligns with best practices for scalability and security.

---

> 🔧 *Next Steps*: Development of procedures, packages, and audit triggers for automated workflows and secure operations (Phase VI & VII).

**📘 Phase VII: Advanced Programming with Triggers and Auditing**

### 🔍 **Objective**

To enforce business rules and enhance system security by implementing compound triggers, auditing mechanisms, and access restrictions that align with business logic and compliance policies.

### 🔐 **Key Features Implemented**

#### 🔄 1. Compound Trigger for Auditing

A **compound trigger** was implemented to automatically record every DML operation (INSERT, UPDATE, DELETE) performed on the `tickets` table.

**🧾 Trigger Name**: `compound_ticket_audit`
**Table Affected**: `helpdesk_user.tickets`
**Logs Into**: `helpdesk_user.audit_log`

**Trigger Highlights**:

* Captures the operation type, timestamp, user performing the action, and affected ticket ID.
* Enhances transparency and accountability for sensitive ticket updates.

CREATE OR REPLACE TRIGGER helpdesk_user.compound_ticket_audit
FOR INSERT OR UPDATE OR DELETE ON helpdesk_user.tickets
COMPOUND TRIGGER

  v_action VARCHAR2(20);
  v_user   VARCHAR2(50) := SYS_CONTEXT('USERENV', 'SESSION_USER');

BEFORE EACH ROW IS
BEGIN
  IF INSERTING THEN
    v_action := 'INSERT';
  ELSIF UPDATING THEN
    v_action := 'UPDATE';
  ELSIF DELETING THEN
    v_action := 'DELETE';
  END IF;
END BEFORE EACH ROW;

AFTER EACH ROW IS
BEGIN
  INSERT INTO helpdesk_user.audit_log (operation, user_id, ticket_id, timestamp)
  VALUES (v_action, v_user, :NEW.ticket_id, SYSDATE);
END AFTER EACH ROW;

END compound_ticket_audit;

#### 📅 2. Holiday and Weekday Restriction Trigger

To prevent unauthorized changes during non-operational periods, a **BEFORE INSERT OR UPDATE** trigger restricts data modifications by employees on:

* Public holidays (stored in the `holidays` table)
* Weekdays (Monday–Friday)

CREATE OR REPLACE TRIGGER helpdesk_user.restrict_employee_ops
BEFORE INSERT OR UPDATE ON helpdesk_user.tickets
FOR EACH ROW
DECLARE
  v_day VARCHAR2(10);
  v_count NUMBER;
  v_user_role helpdesk_user.users.role%TYPE;
BEGIN
  -- Get current day
  v_day := TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE=ENGLISH');

  -- Check if today is a holiday
  SELECT COUNT(*) INTO v_count
  FROM helpdesk_user.holidays
  WHERE holiday_date = TRUNC(SYSDATE);

  -- Get user role
  SELECT role INTO v_user_role
  FROM helpdesk_user.users
  WHERE user_id = :NEW.assigned_to;

  IF v_user_role = 'Technician' AND (v_day IN ('MON', 'TUE', 'WED', 'THU', 'FRI') OR v_count > 0) THEN
    RAISE_APPLICATION_ERROR(-20001, 'Technicians cannot modify tickets on weekdays or holidays.');
  END IF;
END;


### 📝 3. Audit Log Table

CREATE TABLE helpdesk_user.audit_log (
  audit_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  operation VARCHAR2(20),
  user_id VARCHAR2(50),
  ticket_id NUMBER,
  timestamp DATE DEFAULT SYSDATE
);


This table stores:

* Type of DML operation
* User who performed the operation
* Affected ticket ID
* Timestamp of the action


### 🧪 4. Testing and Verification

**Test Case 1**: Inserting a ticket on a weekday as a Technician
**Result**: Fails with an error message.

**Test Case 2**: Manager inserts a ticket on a holiday
**Result**: Successful — role bypasses restriction.

**Test Case 3**: Technician inserts ticket on a Saturday
**Result**: Successful — day not restricted.

**Test Case 4**: Any update logs audit trail
**Result**: Verified by selecting from `audit_log`.

### ⚠️ Challenges Faced

* **Trigger Compilation Errors**: Some triggers required explicit schema-qualified object names.
* **Holiday Matching**: Used `TRUNC(SYSDATE)` to match dates without time precision.
* **Auditing Performance**: Minimized performance hit by writing to audit\_log in the AFTER clause only.

### ✅ Conclusion

Phase VII added critical **security**, **auditing**, and **workflow enforcement** features to the Helpdesk Tracker. The use of compound triggers and restricted DML operations ensures data is accurate, compliant, and auditable — all vital for IT support systems.


> 🔧 *Final Note*: With auditing and procedural logic in place, the system is now ready for deployment, user interface integration, and system-wide testing.
